{"version":3,"sources":["questions.js","App.js","serviceWorker.js","index.js"],"names":["questions","wordCount","text","pairs","App","React","useState","pairNum","setPairNum","qNum","setQNum","pair","wordCounts","console","log","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAAMA,EAAY,CAChB,EAAK,CACHC,UAAW,GACXC,KACE,4QAEJ,EAAK,CACHD,UAAW,GACXC,KACE,0SAEJ,EAAK,CACHD,UAAW,GACXC,KACE,gTAEJ,EAAK,CACHD,UAAW,GACXC,KACE,0VAEJ,EAAK,CACHD,UAAW,GACXC,KAAM,oMAER,EAAK,CACHD,UAAW,GACXC,KACE,gWAEJ,EAAK,CACHD,UAAW,GACXC,KACE,6aAEJ,EAAK,CACHD,UAAW,GACXC,KACE,8RAEJ,EAAK,CACHD,UAAW,GACXC,KACE,obAEJ,GAAM,CACJD,UAAW,GACXC,KACE,gZAEJ,GAAM,CACJD,UAAW,IACXC,KACE,k4BAEJ,GAAM,CACJD,UAAW,IACXC,KACE,qnBAIAC,EAAQ,CACZ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IACJ,CAAC,GAAI,K,MCxBQC,MAxCf,WAAgB,IAAD,EACiBC,IAAMC,SAAS,GADhC,mBACNC,EADM,KACGC,EADH,OAEWH,IAAMC,SAAS,GAF1B,mBAENG,EAFM,KAEAC,EAFA,KAGPR,EAAQF,EAAUS,IAAST,EAAUS,GAAMP,MAAS,GACpDS,EAAOR,EAAMI,GACbK,EAAa,CAACZ,EAAUW,EAAK,IAAIV,UAAWD,EAAUW,EAAK,IAAIV,WAIrE,OAFAY,QAAQC,IAAIZ,GAGV,yBAAKa,UAAU,OACb,yBAAKA,UAAU,mBACb,4BAAQA,UAAU,kBAAkBC,QAAS,WAE3CR,EADoBD,EAAU,GAAM,EAAKA,EAAU,EAAK,KAEtD,KACJ,sCAAQA,EAAU,IAClB,4BAAQQ,UAAU,kBAAkBC,QAAS,WAE3CR,EADoBD,EAAU,GAAM,EAAI,EAAKA,EAAU,KAErD,MAEJL,EAUA,yBAAKa,UAAU,aAAaC,QAAS,kBAAMN,EAAQ,KACjD,qCAAOR,KAVT,yBAAKa,UAAU,qBACf,yBAAKA,UAAU,oBAAoBC,QAAS,kBAAMN,EAAQ,CAACC,EAAK,OAC9D,qCAAOC,EAAW,GAAlB,aAEF,yBAAKG,UAAU,oBAAoBC,QAAS,kBAAMN,EAAQ,CAACC,EAAK,OAC9D,qCAAOC,EAAW,GAAlB,gBCpBUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.a073e402.chunk.js","sourcesContent":["const questions = {\n  '1': {\n    wordCount: 40,\n    text:\n      '蔣家羊，楊家牆，蔣家羊撞倒了楊家牆，楊家牆壓死了蔣家羊，楊家要蔣家賠牆，蔣家要楊家賠羊。',\n  },\n  '2': {\n    wordCount: 43,\n    text:\n      '坡上立著一隻鵝，坡下就是一條河。寬寬的河，肥肥的鵝，鵝要過河，河要渡鵝，不知是鵝過河，還是河渡鵝？',\n  },\n  '3': {\n    wordCount: 44,\n    text:\n      '山上五棵樹，架上五壺醋，林中五隻鹿，箱裡五條褲。伐了山上樹，搬下架上的醋，射死林中的鹿，取出箱中的褲',\n  },\n  '4': {\n    wordCount: 52,\n    text:\n      '扁擔長，板凳寬，板凳沒有扁擔長，扁擔沒有板凳寬。扁擔要綁在板凳上，板凳不讓扁擔綁在板凳上，扁擔偏要扁擔綁在板凳上。',\n  },\n  '5': {\n    wordCount: 30,\n    text: '老龍惱怒鬧老農，老農惱怒鬧老龍。農怒龍惱農更怒，龍惱農怒龍怕農。',\n  },\n  '6': {\n    wordCount: 52,\n    text:\n      '出南門，走六步，見著六叔和六舅，叫聲六叔和六舅，借我六鬥六升好綠豆；過了秋，打了豆，還我六叔六舅六十六鬥六升好綠豆。',\n  },\n  '7': {\n    wordCount: 69,\n    text:\n      '一個跛子，牽著驢子; 一個駝子，拉著車子﹔一個瞎子，抱著孩子。 跛子的驢子，撞著駝子的車子﹔駝子的車子，碰倒瞎子的孩子; 瞎子要打駝子，駝子要打跛子。',\n  },\n  '8': {\n    wordCount: 43,\n    text:\n      '山前有個嚴圓眼，山後有個嚴眼圓，二人山前來比眼，不知是嚴圓眼的眼圓，還是嚴眼圓比嚴圓眼的眼圓？',\n  },\n  '9': {\n    wordCount: 66,\n    text:\n      '藍教練是女教練，呂教練是男教練，藍教練不是男教練，呂教練不是女教練。藍南是男籃主力，呂柟是女籃主力，呂教練在男籃訓練藍南，藍教練在女籃訓練呂柟。',\n  },\n  '10': {\n    wordCount: 63,\n    text:\n      '七巷一個漆匠，西巷一個錫匠。七巷漆匠用了西巷錫匠的錫，西巷錫匠拿了七巷漆匠的漆。七巷漆匠氣西巷錫匠用了漆，西巷錫匠譏七巷漆匠拿了錫。',\n  },\n  '11': {\n    wordCount: 136,\n    text:\n      '柳林鎮有個六號樓，劉老六住在六號樓。有一天，來了牛老六，牽了六隻猴；來了侯老六，拉了六頭牛；來了仇老六，提了六簍油；來了尤老六，背了六匹綢。牛老六、侯老六、仇老六、尤老六，住上劉老六的六號樓，半夜裡，牛抵猴，猴鬥牛，撞倒了仇老六的油，油壞了尤老六的綢。牛老六幫仇老六收起油，侯老六幫尤老六洗掉綢上油',\n  },\n  '12': {\n    wordCount: 101,\n    text:\n      '司小四和史小世，四月十四日十四時四十上集市，司小四買了四十四斤四兩西紅柿，史小世買了十四斤四兩細蠶絲。司小四要拿四十四斤四兩西紅柿換史小世十四斤四兩細蠶絲。史小世十四斤四兩細蠶絲不換司小四四十四斤四兩西紅柿。',\n  },\n}\n\nconst pairs = [\n  [1, 2],\n  [3, 4],\n  [5, 6],\n  [7, 8],\n  [9, 10],\n  [11, 12],\n]\n\nexport { pairs, questions }\n","import React from 'react'\nimport { pairs, questions } from './questions'\nimport './App.css'\n\nfunction App() {\n  const [pairNum, setPairNum] = React.useState(0)\n  const [qNum, setQNum] = React.useState(0)\n  const text = (questions[qNum] && questions[qNum].text) || ''\n  const pair = pairs[pairNum]\n  const wordCounts = [questions[pair[0]].wordCount, questions[pair[1]].wordCount]\n\n  console.log(text)\n  \n  return (\n    <div className=\"App\">\n      <div className=\"question-number\">\n        <button className=\"question-button\" onClick={() => {\n          const newPairNum = (pairNum - 1) >= 0 ? (pairNum - 1) : 0\n          setPairNum(newPairNum)\n        }}>{'<'}</button>\n        <p>{`Q${pairNum + 1}`}</p>\n        <button className=\"question-button\" onClick={() => {\n          const newPairNum = (pairNum + 1) >= 6 ? 0 : (pairNum + 1)\n          setPairNum(newPairNum)\n        }}>{'>'}</button>\n      </div>\n      {!text ? (\n        <div className=\"select-screen-div\">\n        <div className=\"select-button-div\" onClick={() => setQNum([pair[0]])}>\n          <p>{`${wordCounts[0]} 字`}</p>\n        </div>\n        <div className=\"select-button-div\" onClick={() => setQNum([pair[1]])}>\n          <p>{`${wordCounts[1]} 字`}</p>\n        </div>\n      </div>\n      ) : (\n        <div className=\"text-black\" onClick={() => setQNum(0)}>\n          <p>{`${text}`}</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}